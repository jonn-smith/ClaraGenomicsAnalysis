#!/usr/bin/env python3

#
# Copyright (c) 2019, NVIDIA CORPORATION.  All rights reserved.
#
# NVIDIA CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA CORPORATION is strictly prohibited.
#


import argparse
import os.path

from claragenomics.bindings import cuda
from claragenomics.bindings import cudapoa
from claragenomics.io.utils import read_poa_group_file

"""
Sample program for using CUDAPOA Python API for consensus generation.
"""

cwd = os.path.dirname(os.path.abspath(__file__))
cga_root = os.path.dirname(os.path.dirname(cwd))
cudapoa_data_dir = os.path.join(cga_root, "cudapoa", "data")

def run_cudapoa(groups, msa, print_output):
    """
    Generate consensus for POA groups.

    Args:
        groups : A list of groups (i.e. list of sequences) for which
                 consensus is to be generated.
        msa : Whether to generate MSA or consensus.
        print_output : Print output MSA or consensus.
    """
    # Get avaialble memory information
    free, total = cuda.cuda_get_mem_info(cuda.cuda_get_device())

    # Create batch
    max_sequences_per_poa = 1024
    gpu_mem_per_batch = 0.9 * free
    batch = cudapoa.CudaPoaBatch(max_sequences_per_poa,
                                 gpu_mem_per_batch,
                                 stream=None,
                                 output_type=("msa" if msa else "consensus"))
    # Add poa groups to batch
    initial_count = 0
    for i, group in enumerate(groups):
        group_status, seq_status = batch.add_poa_group(group)
        print("Group status: {}".format(group_status))
        print("Seq status: {}".format(seq_status))
        if (group_status == 0):
            pass

        # Once batch is full, run POA processing
        if ((group_status == 1) or (i == len(groups) - 1)):
            print('Generating POA for group {}'.format(i))
            batch.generate_poa()

            print('Batch ID: {}'.format(batch.batch_id))
            print('Total POAs: {}'.format(batch.total_poas))

            if msa:
                msa, status = batch.get_msa()
                if print_output:
                    print(msa)
            else:
                consensus, coverage, status = batch.get_consensus()
                if print_output:
                    print(consensus)

            batch.reset()
            print("Processed group {} - {}".format(initial_count, i))
            initial_count = i


def parse_args():
    """
    Parse command line arguments.
    """
    parser = argparse.ArgumentParser(
        description="CUDAPOA Python API sample program.")
    parser.add_argument('-m',
                        help="Run MSA generation. By default consensusis generated.",
                        action='store_true')
    parser.add_argument('-p',
                        help="Print output MSA or consensus for each POA group.",
                        action='store_true')
    parser.add_argument('-f', nargs=1, dest='input_file', default=[os.path.join(cudapoa_data_dir, "sample-windows.txt")],
                        help="Print output MSA or consensus for each POA group.",
                        action='store')
    parser.add_argument('-r',
                        help="Input file is a raw text file of reads to be processed in a single group.",
                        action='store_true')
    return parser.parse_args()


if __name__ == "__main__":

    # Read cmd line args.
    args = parse_args()

    # Create input dataset.

    input_file = args.input_file[0]

    max_length=0
    if args.r:
        group = []
        with open(input_file) as fp:
            for cnt, line in enumerate(fp):
                l = line.strip()
                group.append(l)
                if len(l) > max_length:
                    max_length = len(l)
        groups=[group]
    else:
        groups = read_poa_group_file(input_file, 1000)
        for g in groups:
            for r in g:
                if len(r) > max_length:
                    max_length = len(r)

    print('Max read length: {}'.format(max_length))
    
    # Run CUDAPOA.
    run_cudapoa(groups, args.m, args.p)

